#!/usr/bin/env python
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import *
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt
import numpy as np
import random

window = tk.Tk()
window.title('My Window')
window.geometry('400x600')


def value_picks():
    plt.clf()
    values_picked = []
    values_picked1 = ''
    values_picked2 = ''
    values_picked3 = ''
    values_picked4 = ''
    values_picked5 = ''
    values_picked6 = ''
    values_picked7 = ''
    values_picked8 = ''
    values_picked9 = ''
    values_picked10 = ''
    if (var1.get() == 1):
        values_picked1 = '00:00-00:59'
    if (var2.get() == 1):
        values_picked2 = '01:00-1:59'
    if (var3.get() == 1):
        values_picked3 = '02:00-02:59'
    if (var4.get() == 1):
        values_picked4 = '03:00-03:59'
    if (var5.get() == 1):
        values_picked5 = '04:00-04:59'
    if (var6.get() == 1):
        values_picked6 = '05:00-05:59'
    if (var7.get() == 1):
        values_picked7 = '06:00-06:59'
    if (var8.get() == 1):
        values_picked8 = '07:00-07:59'
    if (var9.get() == 1):
        values_picked9 = '08:00-08:59'
    if (var10.get() == 1):
        values_picked10 = '09:00-10:00'
    # conn = sqlite3.connect("database_name")
    # c = conn.cursor()

    # c.execute(
    #    """
    #    SELECT
    #    *
    #    FROM table_name
    #    """
    # )

    # df = pd.DataFrame(c.fetchall(), columns=["name_one", "name_two", "name_three"])
    np.random.seed(78999)
    random.seed(90897)
    data = {'date': pd.bdate_range('2020-09-21', freq='h', periods=4000).tolist(),
            'x': np.random.randint(10, size=(4000))}
    df = pd.DataFrame(data)
    # setting bins for each hour of the day
    bins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    label = ['00:00-00:59', '01:00-1:59', '02:00-02:59', '03:00-03:59', '04:00-04:59', '05:00-05:59', '06:00-06:59',
             '07:00-07:59', '08:00-08:59', '09:00-10:00']
    # count number of entry in each bin, and save it as series
    df['Time Bin'] = pd.cut(df.date.dt.hour, bins, labels=label, right=False)
    df['Time Bin'].value_counts()
    values = df['Time Bin'].value_counts()
    # take a user input to determine what filters to apply for dictionary

    # test to change bins to dictionary from dataframe to filter
    bincnt = values.to_dict()
    # add something to filter dictionary

    res = dict((k, bincnt[k]) for k in [values_picked1, values_picked2, values_picked3, values_picked4, values_picked5, values_picked6, values_picked7, values_picked8, values_picked9, values_picked10]
               if k in bincnt)
    # possibly add a option for either pie chart or histogram based on user input
    #added
    if (variable.get() == "Pie Chart") :
        plt.clf()
        # prints a pie chart based off of restricted disctionary
        plt.pie(res.values(), labels=res.keys())
        # setting title of graph
        plt.title("People Entering Library")
        # Resize image
        plt.tight_layout()
        # function to save piechart and print out path to image file for export purposes
        fname1 = 'pie.png'
        plt.savefig(fname1)
        # test function to show where data is stored on drive
        import os
        if os.path.exists(fname1):
            print(os.path.abspath(fname1))
        plt.show()
    if (variable.get() == "Histogram") :
        plt.barh(res.keys(), res.values())

        # setting label of y-axis
        plt.ylabel("Times")

        # setting label of x-axis
        plt.xlabel("Enter")
        # setting title of graph
        plt.title("People Entering Library")
        # Resize image
        plt.tight_layout()
        fname2 = 'bar.png'
        plt.savefig(fname2)
        # test function to show where data is stored on drive
        import os
        if os.path.exists(fname2):
           print(os.path.abspath(fname2))
        plt.show()
#        plt.close('all')
#        fig, ax = plt.subplots()
#        ax.bar(res.keys(), res.values())
#        plt.xticks(rotation=18, ha='right')
#        fname2 = 'bar.png'
#        plt.savefig(fname2)
#        # test function to show where data is stored on drive
#        import os
#        if os.path.exists(fname2):
#            print(os.path.abspath(fname2))
#        plt.show()

#makes the checkboxes and sets up var1-var10 to check for user changes
var1 = tk.IntVar()
var2 = tk.IntVar()
var3 = tk.IntVar()
var4 = tk.IntVar()
var5 = tk.IntVar()
var6 = tk.IntVar()
var7 = tk.IntVar()
var8 = tk.IntVar()
var9 = tk.IntVar()
var10 = tk.IntVar()
OPTIONS = ["Pie Chart", "Histogram"]
variable = StringVar()

c1 = tk.Checkbutton(window, text='00:00-00:59', variable=var1, onvalue=1, offvalue=0, command=value_picks)
c1.pack()
c2 = tk.Checkbutton(window, text='01:00-1:59', variable=var2, onvalue=1, offvalue=0, command=value_picks)
c2.pack()
c3 = tk.Checkbutton(window, text='02:00-02:59', variable=var3, onvalue=1, offvalue=0, command=value_picks)
c3.pack()
c4 = tk.Checkbutton(window, text='03:00-03:59', variable=var4, onvalue=1, offvalue=0, command=value_picks)
c4.pack()
c5 = tk.Checkbutton(window, text='04:00-04:59', variable=var5, onvalue=1, offvalue=0, command=value_picks)
c5.pack()
c6 = tk.Checkbutton(window, text='05:00-05:59', variable=var6, onvalue=1, offvalue=0, command=value_picks)
c6.pack()
c7 = tk.Checkbutton(window, text='06:00-06:59', variable=var7, onvalue=1, offvalue=0, command=value_picks)
c7.pack()
c8 = tk.Checkbutton(window, text='07:00-07:59', variable=var8, onvalue=1, offvalue=0, command=value_picks)
c8.pack()
c9 = tk.Checkbutton(window, text='08:00-08:59', variable=var9, onvalue=1, offvalue=0, command=value_picks)
c9.pack()
c10 = tk.Checkbutton(window, text='09:00-10:00', variable=var10, onvalue=1, offvalue=0, command=value_picks)
c10.pack()
variable.set(OPTIONS[0])
w = OptionMenu(window, variable, *OPTIONS)
w.pack()

#initalizes the loop for the gui
window.mainloop()
